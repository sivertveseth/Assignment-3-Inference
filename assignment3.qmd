---
title: "Assignment 3: Drawing inference from statistical models, and statistical power"
author: "Sivert Helland Veseth"
format: html
code-fold: true
execute: 
  warning: false
editor: visual
editor_options: 
  chunk_output_type: console
bibliography: resources/referanser.bib
csl: resources/apa.csl
---

## Sette opp simuleringen

```{r}
# Laster inn nødvendige pakker
library(tidyverse)
library(gridExtra)


set.seed(1) # Sikrer at alle dei tilfeldige tallene som generes er dei sammen hver gang koden kjøres
population <- rnorm(1000000, mean = 1.5, sd = 3) # Generer 1 million tilfeldige verdier som er normalfordelt

# Sample 1
samp1 <- data.frame(y = sample(population, 8, replace = FALSE))

# Sample 2
samp2 <- data.frame(y = sample(population, 40, replace = FALSE))

# Lager lineære modeller for hver sample med kun en konstant
m1 <- lm(y ~ 1, data = samp1)
m2 <- lm(y ~ 1, data = samp2)

# Oppsummering av modellene 
summary(m1)
summary(m2)
```

Under kan man se en .... som viser t-fordelingen av dei ulike lineære modellene, der det skyggelagte området er dei observerte p-verdiene.

```{r}
## Definer t-verdier for begge utvalg
t_value1 <- 1.47  # t-verdi for samp1
t_value2 <- 3.953  # t-verdi for samp2
df1 <- 7   # Antall frihetsgrader for samp1 (n-1, her 8-1=7)
df2 <- 39  # Antall frihetsgrader for samp2 (n-1, her 40-1=39)

# Lag dataramme for x-verdier
x_vals <- seq(-5, 5, length.out = 1000)

# Lag plot for samp1
plot1 <- ggplot(data.frame(x = x_vals), aes(x)) +
  # Fyll venstre hale for samp1
  stat_function(fun = dt, args = list(df = df1), xlim = c(-5, -t_value1), geom = "area", fill = "gray", alpha = 0.5) +
  # Fyll høyre hale for samp1
  stat_function(fun = dt, args = list(df = df1), xlim = c(t_value1, 5), geom = "area", fill = "gray", alpha = 0.5) +
  # Tegn hele t-fordelingskurven for samp1
  stat_function(fun = dt, args = list(df = df1)) +
  # Legg til den observerte t-verdien som en vertikal linje
  geom_vline(xintercept = t_value1, color = "red", linetype = "dashed") +
  # Annoter t-verdien for samp1
  annotate("text", x = t_value1 + 0.3, y = 0.2, label = "Observed t (samp1)", angle = -90, size = 2.8) +
  labs(title = "t-distribution for samp1", x = "t", y = "Density f(t)") +
  theme_classic() +
  xlim(-5, 5)

# Print plot1
print(plot1)

# Utregne p-verdier for m1
p1 <- 2 * pt(t_value1, df = df1, lower.tail = FALSE)

# Print p-verdier
print(p1)


# Lag plot for samp2
plot2 <- ggplot(data.frame(x = x_vals), aes(x)) +
  # Fyll venstre hale for samp2
  stat_function(fun = dt, args = list(df = df2), xlim = c(-5, -t_value2), geom = "area", fill = "lightblue", alpha = 0.5) +
  # Fyll høyre hale for samp2
  stat_function(fun = dt, args = list(df = df2), xlim = c(t_value2, 5), geom = "area", fill = "lightblue", alpha = 0.5) +
  # Tegn hele t-fordelingskurven for samp2
  stat_function(fun = dt, args = list(df = df2)) +
  # Legg til den observerte t-verdien som en vertikal linje
  geom_vline(xintercept = t_value2, color = "red", linetype = "dashed") +
  # Annoter t-verdien for samp2
  annotate("text", x = t_value2 + 0.3, y = 0.2, label = "Observed t (samp2)", angle = -90, size = 2.8) +
  labs(title = "t-distribution for samp2", x = "t", y = "Density f(t)") +
  theme_classic() +
  xlim(-6, 6)

# Utregne p-verdi for m2
p2 <- 2 * pt(t_value2, df = df2, lower.tail = FALSE)

# Print p-verdier
print(p2)


```

Svar på spørsmålene:

1.  Explain the estimate, SE, *t*-value, and *p*-value from the regression models that we created previously (`m1` and `m2`).

<u>**Estimate**</u>: Den estimerte koeffisienten representerer i regresjonsanalyser med to variabler kor mykje vi kan forvente at den avhengige variabelen endrer seg per endring i den uavhengie variabelen (@spieg2019, s.275). I våre datasettene over, vil *estimate* derimot korrespondere til gjennomsnittet av alle verdiene i dei ulike utvalgene, og gi oss et estimat på gjennomsnittet til populasjonen. I samp1 er utvalgets gjennomsnitt 1.84 noe som er litt ifra populasjonens faktiske gjennomsnitt på 1.5, men når vi øker størrelsen på utvalget, slik som i samp2, ser vi at gjennomsnittet nærmer seg veldig populasjonen: samp2 (`r mean(samp2$y)`) vs $\mu$(1.5).

<u>**Std.Error**</u>: Standardfeilen måler kor mykje estimatet forventes å variere fra utvalg til utvalg (@spieg2019, s.231, 403-4). I vårt tilfelle, vil standardfeilen si kor mykje gjennomsnittet i utvalget vårt er forventet å variere fra utvalg til utvalg grunnet tilfeldig variasjon i datatene. SE beregnes slik:

$$
\text{SE} = \frac{s}{\sqrt{n}}
$$

hvor:

-   (s ) er standardavviket til utvalget
-   ( n ) er antall observasjoner
